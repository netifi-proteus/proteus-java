plugins {
    id 'com.google.protobuf' version '0.8.3'
}

dependencies {
    protobuf project (':metrics-idl')
    compile project (':frames')

    compile 'com.google.protobuf:protobuf-java:3.5.0'
    compile 'com.google.protobuf:protobuf-java-util:3.5.0'

    compile 'io.rsocket:rsocket-core:0.10.3'
    compile 'io.rsocket:rsocket-transport-netty:0.10.3'
    compile 'io.micrometer:micrometer-core:1.0.2'
}

sourceSets {
    main {
        proto { srcDir 'src/main/proto' }
    }

    test {
        proto { srcDir 'src/test/proto' }
    }
}

def protocPluginBaseName = "proteus-java-${osdetector.os}-${osdetector.arch}"
def javaPluginPath = "$rootDir/protobuf-rpc/build/exe/java_plugin/$protocPluginBaseName"

protobuf {
    generatedFilesBaseDir = "${projectDir}/src/generated"

    plugins {
        proteus {
            path = javaPluginPath
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.dependsOn ':protobuf-rpc:java_pluginExecutable'
            // Recompile protos when the codegen has been changed
            task.inputs.file javaPluginPath
            // Recompile protos when build.gradle has been changed, because
            // it's possible the version of protoc has been changed.
            task.inputs.file "${rootProject.projectDir}/build.gradle"
            task.plugins {
                proteus {}
            }
        }
    }
}

idea {
    module {
        sourceDirs += file("src/main/proto")
        sourceDirs += file("src/generated/main/java")
        sourceDirs += file("src/generated/main/proteus")

        generatedSourceDirs += file('src/generated/main/java')
        generatedSourceDirs += file('src/generated/main/proteus')
    }
}

clean {
    delete 'src/generated'
}