//
//    Copyright 2019 The Proteus Authors
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
syntax = "proto3";

package io.netifi.proteus.testing.protobuf;

import "google/protobuf/empty.proto";
import "rsocket/options.proto";

option java_package = "io.netifi.proteus.testing.protobuf";
option java_outer_classname = "SimpleServiceProto";
option java_multiple_files = true;

// A simple service for test.
service SimpleService {
  // fire and forget
  rpc FireAndForget (SimpleRequest) returns (google.protobuf.Empty) {
    option (io.rsocket.rpc.options) = {
      fire_and_forget: true
    };
  }

  // Streams when you send a Fire and Forget
  rpc StreamOnFireAndForget (google.protobuf.Empty) returns (stream SimpleResponse) {}

  // Simple unary RPC.
  rpc UnaryRpc (SimpleRequest) returns (SimpleResponse) {}

  // Simple client-to-server streaming RPC.
  rpc ClientStreamingRpc (stream SimpleRequest) returns (SimpleResponse) {}

  // Simple server-to-client streaming RPC.
  rpc ServerStreamingRpc (SimpleRequest) returns (stream SimpleResponse) {}

  // Simple server-to-client streaming RPC.
  rpc ServerStreamingFireHose (SimpleRequest) returns (stream SimpleResponse) {}

  // Simple bidirectional streaming RPC.
  rpc BidiStreamingRpc (stream SimpleRequest) returns (stream SimpleResponse) {}
}

// A simple request message type for test.
message SimpleRequest {
  // An optional string message for test.
  string requestMessage = 1;
}

// A simple response message type for test.
message SimpleResponse {
  // An optional string message for test.
  string responseMessage = 1;
}
