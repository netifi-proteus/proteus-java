syntax = "proto3";

package io.netifi.proteus.broker.info;

import "google/protobuf/empty.proto";
import "proteus/broker_info.proto";

option java_package = "io.netifi.proteus.broker.mgmt";
option java_outer_classname = "BrokerManagement";
option java_multiple_files = true;

message Ack {
}

message Brokers {
    repeated io.netifi.proteus.broker.info.Broker brokers = 1;
}

service BrokerManagementService {
    // Shutdowns down a broker process
    rpc shutdown (google.protobuf.Empty) returns (google.protobuf.Empty) {}

    // Broker leaves the cluster, but stays running
    rpc leave (google.protobuf.Empty) returns (Ack) {}

    // Rejoins the cluster it  has seed information for
    rpc rejoin (google.protobuf.Empty) returns (Ack) {}

    // Tells the Broker to join using the provided Brokers
    rpc join (Brokers) returns (Ack) {}

    // Closes connections to a specific set of destinations
    rpc closeDestination (stream io.netifi.proteus.broker.info.Destination) returns (Ack) {}

    // Closes connections to a specific set of brokers
    rpc closeBroker (stream io.netifi.proteus.broker.info.Broker) returns (Ack) {}

    // Closes all connections on the broker - except broker to broker connections
    rpc closeDestinations (google.protobuf.Empty) returns (Ack) {}

    // Closes connections to all other brokers
    rpc closeBrokers (google.protobuf.Empty) returns (Ack) {}

    // Closes all connections on the broker including broker to broker connections
    rpc closeAll (google.protobuf.Empty) returns (Ack) {}
}
