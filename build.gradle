buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.8.1"
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.16' // declare before any other plugin
    id 'com.google.osdetector' version '1.4.0'
    id 'com.github.sherter.google-java-format' version '0.7.1' apply false
    id 'com.github.johnrengelman.shadow' version '2.0.1' apply false
    id 'me.champeau.gradle.jmh' version '0.4.7' apply false
    id 'io.morethan.jmhreport' version '0.6.2.1' apply false
    id 'io.spring.dependency-management' version '1.0.6.RELEASE' apply false
    id 'com.google.protobuf' version '0.8.5' apply false
}

buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.github.sherter.google-java-format'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    
    ext['reactor-bom.version'] = 'Californium-SR1'
    ext['rsocket.version'] = '0.11.15'
    ext['rsocket-rpc.version'] = '0.2.11'

    ext['jackson.version'] = '2.9.7'
    ext['jackson-protobuf.version'] = '0.9.10-jackson2.9-proto3'
    ext['guava.version'] = '22.0'
    ext['protobuf.version'] = '3.6.1'
    ext['log4j.version'] = '2.9.0'
    ext['junit.version'] = '5.1.0'
    ext['mockito.version'] = '2.23.0'
    ext['hamcrest.version'] = '1.3'
    ext['jmh.version'] = '1.21'
    ext['micrometer.version'] = '1.0.6'
    ext['assertj.version'] = '3.11.1'
    ext['opentracing.version'] = '0.31.0'
    ext['opentracing.brave.version'] = '0.31.2'
    ext['zipkin.sender.version'] = '2.7.6'
    ext['hdrhistogram.version'] = '2.1.10'
    ext['netty.version'] = '4.1.29.Final'
    ext['typesafe-config.version'] = '1.3.3'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    project.version += project.hasProperty('versionSuffix') ? project.property('versionSuffix') : ''

    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/libs-snapshot' }
        maven { url 'https://oss.jfrog.org/oss-snapshot-local' }
        maven { url 'https://oss.jfrog.org/oss-release-local' }
        mavenCentral()

    }

    googleJavaFormat {
        toolVersion = '1.6'
        exclude '**/generated'
    }
    
    dependencyManagement {
        imports {
            mavenBom "io.projectreactor:reactor-bom:${ext['reactor-bom.version']}"
        }

        dependencies {
            dependencySet(group: 'com.google.protobuf', version: ext['protobuf.version']) {
                entry 'protoc'
                entry 'protobuf-java'
                entry 'protobuf-java-util'
            }

            dependency "com.hubspot.jackson:jackson-datatype-protobuf:${ext['jackson-protobuf.version']}"
            dependency "com.fasterxml.jackson.core:jackson-databind:${ext['jackson.version']}"
            dependency "com.google.guava:guava:${ext['guava.version']}"
            dependency "javax.inject:javax.inject:1"
            dependency "javax.annotation:javax.annotation-api:1.2"

            dependency "com.typesafe:config:${ext['typesafe-config.version']}"

            dependencySet(group: 'org.apache.logging.log4j', version: ext['log4j.version']) {
                entry 'log4j-api'
                entry 'log4j-core'
                entry 'log4j-slf4j-impl'
            }

            dependencySet(group: 'io.rsocket', version: ext['rsocket.version']) {
                entry 'rsocket-core'
                entry 'rsocket-transport-netty'
                entry 'rsocket-transport-local'
            }

            dependencySet(group: 'io.rsocket.rpc', version: ext['rsocket-rpc.version']) {
                entry 'rsocket-rpc-core'
                entry 'rsocket-rpc-metrics-idl'
                entry 'rsocket-rpc-protobuf'
                entry 'rsocket-rpc-protobuf-idl'
            }

            dependency "io.netty:netty-buffer:${ext['netty.version']}"

            dependencySet(group: 'io.micrometer', version: ext['micrometer.version']) {
                entry 'micrometer-core'
                entry 'micrometer-registry-atlas'
                entry 'micrometer-registry-prometheus'
            }

            dependency "io.opentracing:opentracing-api:${ext['opentracing.version']}"
            dependency "io.opentracing.brave:brave-opentracing:${ext['opentracing.brave.version']}"
            dependency "io.zipkin.reporter2:zipkin-sender-okhttp3:${ext['zipkin.sender.version']}"

            // TODO: Remove after JUnit5 migration
            // TEST DEPENDENCIES

            dependency 'junit:junit:4.12'

            dependencySet(group: 'org.junit.jupiter', version: ext['junit.version']) {
                entry 'junit-jupiter-api'
                entry 'junit-jupiter-engine'
                entry 'junit-jupiter-params'
            }

            dependency "org.mockito:mockito-core:${ext['mockito.version']}"
            dependency "org.hamcrest:hamcrest-library:${ext['hamcrest.version']}"
            dependency "org.assertj:assertj-core:${ext['assertj.version']}"
            dependency "org.hdrhistogram:HdrHistogram:${ext['hdrhistogram.version']}"

            dependencySet(group: 'org.junit.vintage', version: ext['junit.version']) {
                entry 'junit-vintage-engine'
            }


            dependencySet(group: 'org.openjdk.jmh', version: ext['jmh.version']) {
                entry 'jmh-core'
                entry 'jmh-generator-annprocess'
            }
        }
    }


    dependencies {
        compileOnly 'javax.inject:javax.inject'

        testCompile 'junit:junit'
        testCompile 'javax.inject:javax.inject'
        testCompile 'io.projectreactor:reactor-test'
        testCompile "com.google.protobuf:protobuf-java"
        testCompile 'org.hdrhistogram:HdrHistogram'
        testCompile 'org.apache.logging.log4j:log4j-api'
        testCompile 'org.apache.logging.log4j:log4j-core'
        testCompile 'org.apache.logging.log4j:log4j-slf4j-impl'
        testCompile 'io.rsocket:rsocket-transport-netty'
        testCompile 'io.rsocket:rsocket-transport-local'
        testCompile 'org.mockito:mockito-core'
    }

    // Build Source Jars
    def sourcesJarMap = [name: 'sourcesJar', type: Jar, dependsOn: classes]
    project.tasks.create(sourcesJarMap, {
        classifier = 'sources'
        from sourceSets.main.allSource
        version = "${project.version}"
    })

    // Build Javadoc Jars
    def javadocJarMap = [name: 'javadocJar', type: Jar, dependsOn: javadoc]
    project.tasks.create(javadocJarMap, {
        classifier = 'javadoc'
        from javadoc.destinationDir
        version = "${project.version}"
    })

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

apply from: "artifactory.gradle"
apply from: "bintray.gradle"