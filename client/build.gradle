plugins {
    id 'com.google.protobuf' version '0.8.3'
}

dependencies {
    compile project (':core')
    compile project (':auth')

    compile 'com.typesafe:config:1.3.2'

    testCompile 'io.micrometer:micrometer-registry-atlas:1.0.2'
}

def protocPluginBaseName = "proteus-java-${osdetector.os}-${osdetector.arch}"
def javaPluginPath = "$rootDir/protobuf-rpc/build/exe/java_plugin/$protocPluginBaseName"

protobuf {
    generatedFilesBaseDir = "${projectDir}/src/generated"

    plugins {
        proteus {
            path = javaPluginPath
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.dependsOn ':protobuf-rpc:java_pluginExecutable'
            // Recompile protos when the codegen has been changed
            task.inputs.file javaPluginPath
            // Recompile protos when build.gradle has been changed, because
            // it's possible the version of protoc has been changed.
            task.inputs.file "${rootProject.projectDir}/build.gradle"
            task.plugins {
                proteus {}
            }
        }
    }
}

sourceSets {
    test {
        proto { srcDir 'src/test/proto' }
    }
}

idea {
    module {
        testSourceDirs += file("src/test/proto")
        testSourceDirs += file("src/generated/test/java")
        testSourceDirs += file("src/generated/test/proteus")

        generatedSourceDirs += file('src/generated/test/java')
        generatedSourceDirs += file('src/generated/test/proteus')
    }
}

clean {
    delete 'src/generated'
}