/*
 * Copyright 2016 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.netifi.proteus.common.stats;

import io.netifi.proteus.common.time.Clock;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.DoubleAdder;

/**
 * Compute the exponential weighted moving average of a series of values. The time at which you
 * insert the value into `Ewma` is used to compute a weight (recent points are weighted higher). The
 * parameter for defining the convergence speed (like most decay process) is the half-life.
 *
 * <p>e.g. with a half-life of 10 unit, if you insert 100 at t=0 and 200 at t=10 the ewma will be
 * equal to (200 - 100)/2 = 150 (half of the distance between the new and the old value)
 */
public class Ewma extends AtomicInteger {
  private final long tau;
  private volatile long stamp;
  private volatile double ewma;
  private DoubleAdder adder = new DoubleAdder();

  public Ewma(long halfLife, TimeUnit unit, double initialValue) {
    this.tau = Clock.DEFAULT.unit().convert((long) (halfLife / Math.log(2)), unit);
    stamp = 0L;
    ewma = initialValue;
  }

  public void insert(double x) {
    adder.add(x);
    accumulate();
  }

  public void reset(double value) {
    stamp = 0L;
    ewma = value;
  }

  public double value() {
    return ewma;
  }

  private void accumulate() {
    if (getAndIncrement() == 0) {
      int missed = 1;
      long s = stamp;
      double e = ewma;
      for (; ; ) {
        long now = Clock.DEFAULT.getEpochTime();
        double elapsed = Math.max(0, now - s);
        s = now;

        double w = Math.exp(-elapsed / tau);
        e = w * e + (1.0 - w) * adder.sumThenReset();

        if (get() + -missed == 0) {
          stamp = s;
          ewma = e;
        }

        missed = addAndGet(-missed);
        if (missed == 0) {
          break;
        }
      }
    }
  }

  @Override
  public String toString() {
    return "Ewma(value=" + ewma + ", age=" + (Clock.DEFAULT.getEpochTime() - stamp) + ")";
  }
}
